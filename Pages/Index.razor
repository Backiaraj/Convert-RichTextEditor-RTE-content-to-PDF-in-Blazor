@page "/"

@using System;
@using System.IO;
@using RTEPDF.Data;
@using System.Threading.Tasks;
@using Syncfusion.Pdf;
@using Syncfusion.HtmlConverter;
@using Syncfusion.Blazor.RichTextEditor;
@using Syncfusion.Blazor.Popups;
@inject ExportService exportService

<button class="e-btn" @onclick="@OnBtnClick">Open Dialog</button>

<SfDialog @bind-Visible="@IsVisible" Width="550px" ShowCloseIcon="true" IsModal="true">
    <DialogTemplates>
        <Header> Dialog</Header>
        <Content>
            <SfRichTextEditor ID="defalt_RTE" @ref="RteObj" @bind-Value="@rteValue">
                <ChildContent>
                    <RichTextEditorToolbarSettings Items="@Tools" Type="ToolbarType.Expand"></RichTextEditorToolbarSettings>
                    <RichTextEditorImageSettings SaveUrl="api/SampleData/Save" Path="../images/"></RichTextEditorImageSettings>
                </ChildContent>
            </SfRichTextEditor>
            <div>
                <button class="btn btn-primary" @onclick="@ExportAsPDF">Export as PDF</button>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton OnClick="@OkClick">
            <DialogButtonModel Content="OK" IsPrimary="true"></DialogButtonModel>
        </DialogButton>
        <DialogButton OnClick="@OkClick">
            <DialogButtonModel Content="Cancel"></DialogButtonModel>
        </DialogButton>
    </DialogButtons>
</SfDialog>


@code {
    [Inject]
    IJSRuntime jsRuntime { get; set; }

    SfRichTextEditor RteObj;
    private string rteValue { get; set; } = @"<p>Starting Text</p>";

    public object[] Tools = new object[]{
        "Bold", "Italic", "Underline", "SubScript", "SuperScript", "StrikeThrough",
        "FontName", "FontSize", "FontColor", "BackgroundColor",
        "LowerCase", "UpperCase", "|",
        "Formats", "Alignments", "OrderedList", "UnorderedList",
        "Outdent", "Indent", "|", "CreateTable",
        "CreateLink", "Image", "|", "ClearFormat", "Print",
        "SourceCode", "FullScreen", "|", "Undo", "Redo"
    };

    private bool IsVisible { get; set; } = true;

    private void OkClick()
    {
        this.IsVisible = false;
    }
    private void OnBtnClick()
    {
        this.IsVisible = true;
    }

    private async Task ExportAsPDF()
    {
        using (MemoryStream excelStream = exportService.ExportAsPdf(this.rteValue))
        {
            await SampleInterop.SaveAs<object>
    (jsRuntime, "Sample.pdf", excelStream.ToArray());
        }
    }
}
